name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git  libssl-dev pkg-config libxcb-util0-dev libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxdmcp-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxkbfile-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxrender-dev libxres-dev libxss-dev libxt-dev libxtst-dev libxv-dev libxcb-glx0-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxcb-dri3-dev libxcb-cursor-dev libxcb-dri2-0-dev libxcb-dri3-dev libxcb-present-dev libxcb-composite0-dev libxcb-ewmh-dev libxcb-res0-dev uuid-dev libxxf86vm-dev
    - name: Install Conan
      run: |
        pip install conan
    - name: Create Conan Profile
      run: |
        conan profile detect --force
    - name: Install Conan Dependencies
      run: |
        conan install . --output-folder=build --build=missing -c tools.system.package_manager:mode=install
    - name: Build the Application
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
        cmake --build .

    - name: Configure SSH Key
      run: |
        pwd
        ls
        mkdir -p ~/.ssh
        echo "${{ secrets.TARGET_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Add Target Host to Known Hosts
      run: |
        pwd
        ls
        ssh-keyscan -H ${{ secrets.TARGET_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy Build to Target Host
      run: |
        pwd
        ls
        scp -r ./build ${{ secrets.TARGET_HOST_USER }}@${{ secrets.TARGET_HOST }}:/home/ubuntu/cpp-build/backend_binary